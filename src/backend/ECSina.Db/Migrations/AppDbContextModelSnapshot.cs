// <auto-generated />
using System;
using ECSina.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ECSina.Db.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ECSina.Db.Entities.DataComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EntityId");

                    b.ToTable("DataComponent");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("ECSina.Db.Entities.DataEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("DataEntity");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Forums.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ForumId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ForumId");

                    b.ToTable("Message");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Auth.PasswordComponent", b =>
                {
                    b.HasBaseType("ECSina.Db.Entities.DataComponent");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.ToTable("PasswordComponent");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Auth.RolesComponent", b =>
                {
                    b.HasBaseType("ECSina.Db.Entities.DataComponent");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("boolean");

                    b.ToTable("RolesComponent");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Auth.UserComponent", b =>
                {
                    b.HasBaseType("ECSina.Db.Entities.DataComponent");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedLogin")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("NormalizedLogin")
                        .IsUnique();

                    b.ToTable("UserComponent");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Forums.ForumComponent", b =>
                {
                    b.HasBaseType("ECSina.Db.Entities.DataComponent");

                    b.ToTable("ForumComponent");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Forums.TopicComponent", b =>
                {
                    b.HasBaseType("ECSina.Db.Entities.DataComponent");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.ToTable("TopicComponent");
                });

            modelBuilder.Entity("ECSina.Db.Entities.HierarchyComponent", b =>
                {
                    b.HasBaseType("ECSina.Db.Entities.DataComponent");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.HasIndex("ParentId");

                    b.ToTable("HierarchyComponent");
                });

            modelBuilder.Entity("ECSina.Db.Entities.DataComponent", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("ECSina.Db.Entities.DataEntity", "Entity")
                        .WithMany("Components")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("ECSina.Db.Entities.DataEntity", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Forums.Message", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataEntity", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.HasOne("ECSina.Db.Entities.DataEntity", "Forum")
                        .WithMany()
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Forum");
                });

            modelBuilder.Entity("ECSina.Db.Entities.Auth.PasswordComponent", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataComponent", null)
                        .WithOne()
                        .HasForeignKey("ECSina.Db.Entities.Auth.PasswordComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECSina.Db.Entities.Auth.RolesComponent", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataComponent", null)
                        .WithOne()
                        .HasForeignKey("ECSina.Db.Entities.Auth.RolesComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECSina.Db.Entities.Auth.UserComponent", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataComponent", null)
                        .WithOne()
                        .HasForeignKey("ECSina.Db.Entities.Auth.UserComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECSina.Db.Entities.Forums.ForumComponent", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataComponent", null)
                        .WithOne()
                        .HasForeignKey("ECSina.Db.Entities.Forums.ForumComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECSina.Db.Entities.Forums.TopicComponent", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataComponent", null)
                        .WithOne()
                        .HasForeignKey("ECSina.Db.Entities.Forums.TopicComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ECSina.Db.Entities.HierarchyComponent", b =>
                {
                    b.HasOne("ECSina.Db.Entities.DataComponent", null)
                        .WithOne()
                        .HasForeignKey("ECSina.Db.Entities.HierarchyComponent", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ECSina.Db.Entities.DataEntity", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("ECSina.Db.Entities.DataEntity", b =>
                {
                    b.Navigation("Components");
                });
#pragma warning restore 612, 618
        }
    }
}
